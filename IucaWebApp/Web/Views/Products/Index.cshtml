@model IEnumerable<Domain.Entities.Product>

@{
    ViewData["Title"] = "Список продуктов";
}

<style>
    /* --- General Styling --- */
    body {
        font-family: 'Nunito', sans-serif; /* Example: Modern, clean font */
        background-color: #f8f9fa; /* Light grey background for the whole page */
        color: #343a40; /* Dark grey text for better readability */
    }

    .container {
        max-width: 1200px; /* Limit container width for larger screens */
    }

    .card-header.bg-dark {
        background-color: #212529 !important; /* Dark background for header, consistent with Bootstrap dark */
    }

    .btn-primary {
        background-color: #007bff; /* Keep primary blue, or slightly adjust */
        border-color: #007bff;
    }

        .btn-primary:hover {
            background-color: #0056b3; /* Darker blue on hover */
            border-color: #0056b3;
        }

    .btn-secondary {
        background-color: #6c757d; /* Keep secondary grey, or slightly adjust */
        border-color: #6c757d;
    }

        .btn-secondary:hover {
            background-color: #545b62; /* Darker grey on hover */
            border-color: #545b62;
        }

    .btn-success {
        background-color: #28a745; /* Keep success green, or slightly adjust */
        border-color: #28a745;
    }

        .btn-success:hover {
            background-color: #1e7e34; /* Darker green on hover */
            border-color: #1e7e34;
        }

        .btn-primary.ripple-effect::before,
        .btn-secondary.ripple-effect::before,
        .btn-success.ripple-effect::before {
            background: rgba(255, 255, 255, 0.3); /* Lighter ripple effect on buttons */
        }

    /* --- Product Card Styling --- */
    .product-card {
        transition: transform 0.2s, box-shadow 0.2s;
        cursor: pointer;
        border: 1px solid #dee2e6; /* Light border for cards */
    }

        .product-card:hover {
            transform: translateY(-8px); /* Slightly more pronounced hover lift */
            box-shadow: 0 12px 24px 0 rgba(0,0,0,0.15); /* Refined box-shadow on hover */
        }

    .card-body {
        padding: 1.5rem; /* Increased padding inside card body */
        display: flex;
        flex-direction: column;
    }

    .card-title {
        font-size: 1.25rem;
        font-weight: 600; /* Slightly bolder title */
        margin-bottom: 0.5rem;
        color: #212529; /* Darker title text */
    }

    .card-subtitle {
        font-size: 1rem;
        color: #6c757d;
        margin-bottom: 0.75rem;
    }

    .card-text {
        font-size: 1rem;
        color: #495057;
        margin-bottom: 0.5rem;
    }

    /* --- Button Styling --- */
    .md-button {
        text-transform: uppercase;
        font-weight: 600; /* Bolder button text */
        transition: transform 0.2s;
        padding: 0.75rem 1.5rem; /* Adjusted button padding */
        border-radius: 0.25rem; /* Slightly more rounded buttons */
    }

        .md-button:hover {
            transform: translateY(-3px); /* Slightly more pronounced button hover lift */
        }

    /* --- Ripple Effect (unchanged for now, can be further customized) --- */
    .ripple-effect {
        position: relative;
        overflow: hidden; /* Ensure ripple stays within button bounds */
    }

        .ripple-effect:active::before {
            content: '';
            position: absolute;
            top: 0;
            left: 0;
            width: 100%;
            height: 100%;
            background: rgba(0,0,0,0.1);
            border-radius: inherit; /* Use border-radius from the button */
            opacity: 0.3;
            pointer-events: none;
            animation: ripple 0.4s linear;
        }
</style>

<div class="container mt-5">
    <div class="row justify-content-center">
        <div class="col-md-12">
            <div class="card shadow-lg rounded-3">
                <div class="card-header bg-dark text-white py-3">
                    <h1 class="mb-0">Список продуктов</h1>
                </div>
                <div class="card-body">
                    <div class="row row-cols-1 row-cols-md-3 g-4">
                        @foreach (var product in Model)
                        {
                            <div class="col">
                                <div class="card product-card h-100 shadow-sm rounded-3">
                                    <div class="card-body d-flex flex-column">
                                        <h5 class="card-title">@product.Name</h5>
                                        <h6 class="card-subtitle mb-2 text-muted">Бренд: @product.Brand</h6>
                                        <p class="card-text">Цена: @product.Price ₽</p>
                                        <p class="card-text">В наличии: @product.QuantityInStock</p>
                                        <div class="mt-auto">
                                            <div class="d-grid gap-2 d-md-flex justify-content-md-between">
                                                <form method="post">
                                                    <input type="hidden" name="UserId" value="6171791f-401f-4e46-8e32-21bd4edbb49b" />
                                                    <input type="hidden" name="ProductId" value="@product.Id" />
                                                    <input type="hidden" name="Quantity" value="1" />
                                                    <button class="btn btn-primary ripple-effect md-button addToCartBtn"
                                                            data-product-id="@product.Id"
                                                            data-product-name="@product.Name"
                                                            data-product-price="@product.Price"
                                                            onclick="AddProductToBasket(event)">
                                                        <i class="bi bi-cart-plus-fill"></i> Добавить в корзину
                                                    </button>
                                                </form>
                                                <a asp-action="Details" asp-route-id="@product.Id" class="btn btn-secondary ripple-effect md-button">
                                                    <i class="bi bi-info-circle-fill"></i> Подробнее
                                                </a>
                                            </div>
                                        </div>
                                    </div>
                                </div>
                            </div>
                        }
                    </div>
                </div>
                <div class="card-footer text-center py-3">
                    <a asp-action="Create" class="btn btn-lg btn-success ripple-effect md-button">
                        <i class="bi bi-plus-circle-fill"></i> Добавить новый продукт
                    </a>
                </div>
            </div>
        </div>
    </div>
</div>

@section Scripts {
    <script>
        document.addEventListener('DOMContentLoaded', () => {
            const addToCartButtons = document.querySelectorAll('.addToCartBtn');
            addToCartButtons.forEach(button => {
                button.addEventListener('click', addToCart);
            });

            updateCartCounter();
        });

        function addToCart(event) {
            const button = event.target.closest('.addToCartBtn');
            const productId = button.dataset.productId;
            const productName = button.dataset.productName;
            const productPrice = parseFloat(button.dataset.productPrice);

            let cart = JSON.parse(localStorage.getItem('shoppingCart') || '[]');
            const existingItem = cart.find(item => item.id === productId);

            if (existingItem) {
                existingItem.quantity++;
            } else {
                cart.push({
                    id: productId,
                    name: productName,
                    price: productPrice,
                    quantity: 1
                });
            }

            localStorage.setItem('shoppingCart', JSON.stringify(cart));
            updateCartCounter();
            showToast(`"${productName}" добавлен в корзину!`);
        }

        function updateCartCounter() {
            const cart = JSON.parse(localStorage.getItem('shoppingCart') || '[]');
            const cartCount = cart.reduce((sum, item) => sum + item.quantity, 0);
            console.log(`Товаров в корзине: ${cartCount}`);
        }

        function showToast(message) {
            const toastDiv = document.createElement('div');
            toastDiv.className = 'toast show position-fixed top-0 end-0 m-3';
            toastDiv.role = 'alert';
            toastDiv.setAttribute('aria-live', 'assertive');
            toastDiv.setAttribute('aria-atomic', 'true');
            toastDiv.innerHTML = `
                <div class="toast-body bg-success text-white">
                    ${message}
                </div>
            `;
            document.body.appendChild(toastDiv);

            setTimeout(() => {
                toastDiv.classList.remove('show');
                setTimeout(() => {
                    document.body.removeChild(toastDiv);
                }, 300);
            }, 3000);
        }

                function AddProductToBasket(event) {
            event.preventDefault();

            const button = event.target.closest('.addToCartBtn'); // Находим кнопку, по которой кликнули
            const form = button.closest('form'); // Находим ближайшую родительскую форму
            if (!form) { // Проверка, что форма найдена
                console.error("Форма не найдена для кнопки 'Добавить в корзину'.");
                return; // Выходим из функции, если форма не найдена
            }

            var formData = new FormData(form);

            try {
                $.ajax({
                    url: "/Baskets/Create",
                    type: "POST",
                    data: formData,
                    success: function(response) { // Добавьте обработку успешного ответа
                        console.log("Успешно добавлено в корзину:", response);
                        updateCartCounter(); // Обновите счетчик корзины (если есть)
                        showToast(`"${button.dataset.productName}" добавлен в корзину!`); // Покажите сообщение
                    },
                    error: function(xhr, status, error) { // Добавьте обработку ошибок AJAX
                        console.error("Ошибка при добавлении в корзину:", error, xhr.responseText);
                        alert("Произошла ошибка при добавлении товара в корзину. Пожалуйста, попробуйте позже."); // Сообщите пользователю об ошибке
                    }
                });
            }
            catch (error) {
                console.error("Ошибка в AddProductToBasket:", error);
            }
        }

    </script>
}